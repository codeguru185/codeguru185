from sqlalchemy import create_engine, MetaData
from sqlalchemy.orm import sessionmaker
from faker import Faker
from random import randint

# Set up the database connection and session
engine = create_engine("postgresql+psycopg2://user:password@host/dbname")
Session = sessionmaker(bind=engine)
session = Session()
metadata = MetaData(bind=engine)
metadata.reflect()

fake = Faker()

# Define the specific tables and the number of rows you want to insert per table
TARGET_TABLES = {
    'table1': 100,
    'table2': 50,
    'table3': 150  # Add your target tables and row counts here
}

# Insert data only for tables in TARGET_TABLES and respect foreign key dependencies
for table in metadata.sorted_tables:
    # Process only the tables specified in TARGET_TABLES
    if table.name not in TARGET_TABLES:
        continue

    num_rows = TARGET_TABLES[table.name]

    print(f"Inserting {num_rows} rows into {table.name}...")

    # Generate and insert the rows
    for _ in range(num_rows):
        row_data = {}
        
        for column in table.columns:
            if column.foreign_keys:
                # Handle foreign key by picking an existing ID from the referenced table
                fk_column = list(column.foreign_keys)[0].column
                fk_table = fk_column.table
                fk_id = session.query(fk_column).order_by(fk_column).limit(1).offset(randint(0, num_rows-1)).scalar()
                row_data[column.name] = fk_id
            elif column.type.python_type == str:
                row_data[column.name] = fake.word() if not column.primary_key else None  # Avoid primary key conflicts
            elif column.type.python_type == int:
               
